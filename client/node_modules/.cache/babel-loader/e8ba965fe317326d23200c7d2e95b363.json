{"ast":null,"code":"import axios from 'axios';\nconst API = axios.create({\n  baseURL: 'http://localhost:5000'\n}); // This function sets the authorization header for the API requests.\n\nconst setAuthorizationHeader = () => {\n  if (localStorage.getItem('profile')) {\n    API.defaults.headers.common.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;\n  }\n};\n\nAPI.interceptors.request.use(async config => {\n  setAuthorizationHeader();\n  return config;\n}); // These are functions that make API requests using the 'API' instance created above.\n\nexport const fetchPost = id => API.get(`/posts/${id}`);\nexport const fetchPosts = page => API.get(`/posts?page=${page}`);\nexport const fetchPostsBySearch = searchQuery => API.get(`/posts/search?searchQuery=${searchQuery.search || 'none'}&tags=${searchQuery.tags}`);\nexport const createPost = newPost => API.post('/posts', newPost);\nexport const likePost = id => API.patch(`/posts/${id}/likePost`);\nexport const comment = (value, id) => API.post(`/posts/${id}/commentPost`, {\n  value\n});\nexport const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\nexport const deletePost = id => API.delete(`/posts/${id}`);\nexport const signIn = formData => API.post('/user/signin', formData);\nexport const signUp = formData => API.post('/user/signup', formData);","map":{"version":3,"sources":["/Users/aavashupadhyaya/Desktop/ExperiencesFinal/client/src/api/index.js"],"names":["axios","API","create","baseURL","setAuthorizationHeader","localStorage","getItem","defaults","headers","common","Authorization","JSON","parse","token","interceptors","request","use","config","fetchPost","id","get","fetchPosts","page","fetchPostsBySearch","searchQuery","search","tags","createPost","newPost","post","likePost","patch","comment","value","updatePost","updatedPost","deletePost","delete","signIn","formData","signUp"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAb,CAAZ,C,CACA;;AACA,MAAMC,sBAAsB,GAAG,MAAM;AACnC,MAAIC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAJ,EAAqC;AACnCL,IAAAA,GAAG,CAACM,QAAJ,CAAaC,OAAb,CAAqBC,MAArB,CAA4BC,aAA5B,GAA6C,UAASC,IAAI,CAACC,KAAL,CAAWP,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAX,EAA4CO,KAAM,EAAxG;AACD;AACF,CAJD;;AAMAZ,GAAG,CAACa,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6B,MAAOC,MAAP,IAAkB;AAC7Cb,EAAAA,sBAAsB;AAEtB,SAAOa,MAAP;AACD,CAJD,E,CAMA;;AACA,OAAO,MAAMC,SAAS,GAAIC,EAAD,IAAQlB,GAAG,CAACmB,GAAJ,CAAS,UAASD,EAAG,EAArB,CAA1B;AACP,OAAO,MAAME,UAAU,GAAIC,IAAD,IAAUrB,GAAG,CAACmB,GAAJ,CAAS,eAAcE,IAAK,EAA5B,CAA7B;AACP,OAAO,MAAMC,kBAAkB,GAAIC,WAAD,IAAiBvB,GAAG,CAACmB,GAAJ,CAAS,6BAA4BI,WAAW,CAACC,MAAZ,IAAsB,MAAO,SAAQD,WAAW,CAACE,IAAK,EAA3F,CAA5C;AACP,OAAO,MAAMC,UAAU,GAAIC,OAAD,IAAa3B,GAAG,CAAC4B,IAAJ,CAAS,QAAT,EAAmBD,OAAnB,CAAhC;AACP,OAAO,MAAME,QAAQ,GAAIX,EAAD,IAAQlB,GAAG,CAAC8B,KAAJ,CAAW,UAASZ,EAAG,WAAvB,CAAzB;AACP,OAAO,MAAMa,OAAO,GAAG,CAACC,KAAD,EAAQd,EAAR,KAAelB,GAAG,CAAC4B,IAAJ,CAAU,UAASV,EAAG,cAAtB,EAAqC;AAAEc,EAAAA;AAAF,CAArC,CAA/B;AACP,OAAO,MAAMC,UAAU,GAAG,CAACf,EAAD,EAAKgB,WAAL,KAAqBlC,GAAG,CAAC8B,KAAJ,CAAW,UAASZ,EAAG,EAAvB,EAA0BgB,WAA1B,CAAxC;AACP,OAAO,MAAMC,UAAU,GAAIjB,EAAD,IAAQlB,GAAG,CAACoC,MAAJ,CAAY,UAASlB,EAAG,EAAxB,CAA3B;AAEP,OAAO,MAAMmB,MAAM,GAAIC,QAAD,IAActC,GAAG,CAAC4B,IAAJ,CAAS,cAAT,EAAyBU,QAAzB,CAA7B;AACP,OAAO,MAAMC,MAAM,GAAID,QAAD,IAActC,GAAG,CAAC4B,IAAJ,CAAS,cAAT,EAAyBU,QAAzB,CAA7B","sourcesContent":["import axios from 'axios';\n\nconst API = axios.create({ baseURL: 'http://localhost:5000' });\n// This function sets the authorization header for the API requests.\nconst setAuthorizationHeader = () => {\n  if (localStorage.getItem('profile')) {\n    API.defaults.headers.common.Authorization = `Bearer ${JSON.parse(localStorage.getItem('profile')).token}`;\n  }\n};\n\nAPI.interceptors.request.use(async (config) => {\n  setAuthorizationHeader();\n\n  return config;\n});\n\n// These are functions that make API requests using the 'API' instance created above.\nexport const fetchPost = (id) => API.get(`/posts/${id}`);\nexport const fetchPosts = (page) => API.get(`/posts?page=${page}`);\nexport const fetchPostsBySearch = (searchQuery) => API.get(`/posts/search?searchQuery=${searchQuery.search || 'none'}&tags=${searchQuery.tags}`);\nexport const createPost = (newPost) => API.post('/posts', newPost);\nexport const likePost = (id) => API.patch(`/posts/${id}/likePost`);\nexport const comment = (value, id) => API.post(`/posts/${id}/commentPost`, { value });\nexport const updatePost = (id, updatedPost) => API.patch(`/posts/${id}`, updatedPost);\nexport const deletePost = (id) => API.delete(`/posts/${id}`);\n\nexport const signIn = (formData) => API.post('/user/signin', formData);\nexport const signUp = (formData) => API.post('/user/signup', formData);\n"]},"metadata":{},"sourceType":"module"}